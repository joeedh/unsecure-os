#include "stdafx.h"
#include "QRPainter.h"
#include "font.h"
#include "tty.h"

#define MAKERGB(r, g, b) ((b) | ((g)<<8) | ((r)<<16))

extern "C" int cursorx;
extern "C" int cursory;

static unsigned char colors[][3] = {
	{0, 0, 0},
	{255, 0, 0},
	{0, 255, 0},
	{255, 255, 0},
	{0, 0, 255},
	{255, 0, 255},
	{55, 180, 220},
	{200, 200, 200},
	{80, 80, 80},
	{255, 100, 80},
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 0},
	{255, 255, 255},
	{0, 0, 0},
	{0, 0, 0}
};

unsigned char *gen_font_bitmap();

#define WIDTH  1200
#define HEIGHT 800

CBMBits::CBMBits(BITMAP bm, int cx, int cy)
{
    DWORD cb = (bm.bmWidthBytes + bm.bmWidthBytes % sizeof(DWORD)) * cy;

    if (m_bits = new BYTE[cb])
        memset(m_bits, 0, cb);
}

CBMBits::~CBMBits()
{
    if (m_bits)
        delete[] m_bits;
}

BYTE &CBMBits::operator [](const size_t ix)
{
    return m_bits[ix];
}

void CQRPainter::initFont()
{
	cw = CELLWID;
	ch = CELLHGT;
	fw = FWIDTH;
	fh = FHEIGHT;

	_d = 0;
	font = gen_font_bitmap();

	int clr = 3;

	unsigned short *data = (unsigned short*) vgadata;
	for (int i=0; i<sizeof(vgadata)/2; i++) {
		data[i] = 32 | (clr<<8);
	}
	
	terminal_initialize();
	_set_buffer(vgadata);
}

CQRPainter::CQRPainter() : m_hbm(NULL)
{
	initFont();
}

CQRPainter::CQRPainter(LPCSTR data) : m_data(data), m_hbm(NULL)
{
	initFont();
    InitializeQR();
}

CQRPainter::CQRPainter(const std::string &data) : m_data(data), m_hbm(NULL)
{
	initFont();
    InitializeQR();
}

CQRPainter::~CQRPainter()
{
    Cleanup();
}

void CQRPainter::Cleanup()
{
}

bool CQRPainter::InitializeQR()
{
	return true;
}

bool CQRPainter::InitializeBitmap(HDC hdc)
{
    if (m_hbm)
    {
        DeleteObject(m_hbm);
        m_hbm = NULL;
    }
    m_hbm = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);
    SetBitmapBits(hdc);

    return NULL != m_hbm;
}

void CQRPainter::SetBitmapBits(HDC hdc)
{
    if (m_hbm)
    {
        BITMAP bm;
        BITMAPINFO bmInfo;
		int dd=0;

		_d = (_d + 1) % 55;

        if (GetObject(m_hbm, sizeof(bm), &bm))
        {
            const int bytesPerPixel = bm.bmBitsPixel / 8;
            CBMBits bmBits(bm, WIDTH, HEIGHT);

            if (bm.bmBitsPixel % 8)
            {
                //TODO
                assert(false);
                return;
            }

            for (int x = 0; x < WIDTH; x++)
            {
                for (int scanLine = 0; scanLine < HEIGHT; scanLine++)
                {
                    int y = bm.bmHeight - scanLine - 1;

					int cellx = x / cw;
					int celly = y / ch;
					int sx = x % cw, sy = y % ch;

					if (cellx >= 80 || celly >= 25) {
						continue;
					}

					int chr = vgadata[celly*80 + cellx] & 255;
					
					chr -= CHAR_OFFSET;
					
					int tx = chr % (fw/cw);
					int ty = chr / (fw/cw);

					int fx = tx*cw + sx;
					int fy = ty*ch + sy;

					//int fx = (x/1) % fw;
					//int fy = (y/1) % fh;
					int idx = fy*FWIDTH + fx;
					int ci = (vgadata[celly*80 + cellx]>>8);
					int fg = ci & 15, bg = (ci>>4);

					int truth = font[idx] ? 1 : 0;

					bmBits[scanLine * bm.bmWidthBytes + x * (bytesPerPixel)] = 
						truth*colors[fg][0] + (truth^1)*colors[bg][0];
					bmBits[scanLine * bm.bmWidthBytes + x * (bytesPerPixel)+1] = 
						truth*colors[fg][1] + (truth^1)*colors[bg][1];
					bmBits[scanLine * bm.bmWidthBytes + x * (bytesPerPixel)+2] = 
						truth*colors[fg][2] + (truth^1)*colors[bg][2];
                    //    for (int ixColorByte = 0; ixColorByte < bytesPerPixel; ixColorByte++)
                    //        bmBits[scanLine * bm.bmWidthBytes + x * (bytesPerPixel) + ixColorByte] = 0xFF;
                }
            }

			int curx = cursorx;
			int cury = cursory;
			int color = (vgadata[curx*80 + cury]>>8) & 15;

			curx *= cw;
			cury *= ch;

			for (int sx=1; sx<4; sx++) {
				for (int sy=1; sy<ch; sy++) {
					int x = curx + sx;
					int y = bm.bmHeight - (cury + sy) - 1;

					for (int k=0; k<3; k++) {
						bmBits[y * bm.bmWidthBytes + x * (bytesPerPixel)] = 255; //colors[color][k];
					}
				}
			}

            memset(&bmInfo, 0, sizeof(bmInfo));
            bmInfo.bmiHeader.biSize = sizeof(bmInfo);
            bmInfo.bmiHeader.biWidth = bm.bmWidth;
            bmInfo.bmiHeader.biHeight = bm.bmHeight;
            bmInfo.bmiHeader.biPlanes = bm.bmPlanes;
            bmInfo.bmiHeader.biBitCount = bm.bmBitsPixel;
            bmInfo.bmiHeader.biCompression = BI_RGB;
            SetDIBits(hdc, m_hbm, 0, bm.bmHeight, bmBits, &bmInfo, DIB_RGB_COLORS);
        }
    }
}

bool CQRPainter::InitializeData(LPCSTR data)
{
    if (data)
        m_data = data;
    else
        m_data.erase();
    return 1;
}

void CQRPainter::PaintData(HWND hwnd, HDC hdc, const RECT &rc)
{
    if (InitializeBitmap(hdc))
    {
        int cxWnd = rc.right - rc.left;
        int cyWnd = rc.bottom - rc.top;
        HDC hdcMem = CreateCompatibleDC(hdc);
        HBITMAP hbmSav = static_cast<HBITMAP>(SelectObject(hdcMem, m_hbm));

		//*
        //QR is best captured when square, so force it
        /*if (cxWnd > cyWnd)
            cxWnd = cyWnd;
        else
            cyWnd = cxWnd;*/

        if (hbmSav)
        {
            BitBlt(hdc, rc.left, rc.top, cxWnd, cyWnd, hdcMem, 0, 0, SRCCOPY);
            SelectObject(hdc, hbmSav);
        }
        if (hdcMem)
            DeleteDC(hdcMem);
	    //*/
    }
}

//x/y locations for each white pixel in image.  everything else is black.
unsigned char font_locs[4084] = {
25,2,26,2,33,2,34,2,35,2,36,2,37,2,44,2,45,2,46,2,55,2,63,2,64,2,65,2,84,2,85,2,86,2,96,2,97,2,103,2,
104,2,115,2,25,3,33,3,34,3,36,3,37,3,44,3,45,3,46,3,54,3,55,3,56,3,57,3,63,3,65,3,66,3,84,3,85,3,86,3,
96,3,104,3,113,3,115,3,117,3,25,4,34,4,36,4,37,4,44,4,45,4,46,4,53,4,54,4,63,4,64,4,65,4,74,4,75,4,76,4,
77,4,85,4,86,4,95,4,96,4,104,4,105,4,113,4,114,4,115,4,116,4,117,4,25,5,43,5,44,5,45,5,46,5,47,5,48,5,53,5,
54,5,65,5,66,5,67,5,74,5,85,5,95,5,96,5,104,5,105,5,114,5,115,5,116,5,25,6,44,6,45,6,46,6,54,6,55,6,56,6,
57,6,63,6,64,6,65,6,74,6,75,6,95,6,96,6,104,6,105,6,114,6,116,6,117,6,43,7,44,7,45,7,46,7,47,7,53,7,57,7,
65,7,66,7,67,7,73,7,74,7,75,7,76,7,77,7,95,7,96,7,104,7,105,7,44,8,45,8,46,8,53,8,54,8,55,8,56,8,57,8,
64,8,65,8,67,8,73,8,74,8,75,8,76,8,77,8,95,8,96,8,104,8,105,8,24,9,25,9,26,9,44,9,45,9,46,9,55,9,65,9,
66,9,67,9,74,9,75,9,76,9,77,9,95,9,96,9,104,9,105,9,44,10,45,10,46,10,55,10,96,10,104,10,96,11,97,11,103,11,104,11,
46,12,47,12,54,12,55,12,56,12,64,12,65,12,74,12,75,12,76,12,77,12,84,12,85,12,86,12,87,12,95,12,96,12,103,12,104,12,105,12,
106,12,107,12,115,12,116,12,117,12,118,12,5,13,46,13,47,13,53,13,54,13,56,13,57,13,63,13,64,13,65,13,73,13,74,13,76,13,77,13,
83,13,84,13,86,13,87,13,95,13,96,13,103,13,104,13,114,13,115,13,5,14,45,14,46,14,53,14,57,14,65,14,77,14,86,14,87,14,94,14,
95,14,96,14,103,14,104,14,113,14,114,14,5,15,45,15,46,15,53,15,57,15,65,15,76,15,77,15,85,15,86,15,94,15,96,15,103,15,104,15,
105,15,106,15,107,15,113,15,114,15,115,15,116,15,117,15,2,16,3,16,4,16,5,16,6,16,7,16,8,16,23,16,24,16,25,16,26,16,27,16,
28,16,45,16,53,16,57,16,65,16,75,16,76,16,86,16,87,16,93,16,94,16,96,16,107,16,113,16,114,16,117,16,5,17,44,17,45,17,53,17,
57,17,65,17,74,17,75,17,87,17,93,17,94,17,95,17,96,17,97,17,107,17,113,17,114,17,117,17,118,17,5,18,14,18,15,18,34,18,35,18,
36,18,44,18,53,18,54,18,57,18,65,18,73,18,74,18,83,18,84,18,86,18,87,18,96,18,103,18,104,18,107,18,114,18,117,18,5,19,14,19,
15,19,34,19,35,19,36,19,43,19,44,19,54,19,55,19,56,19,57,19,63,19,64,19,65,19,66,19,67,19,73,19,74,19,75,19,76,19,77,19,
84,19,85,19,86,19,87,19,95,19,96,19,97,19,104,19,105,19,106,19,107,19,114,19,115,19,116,19,117,19,14,20,15,20,43,20,13,21,14,21,
94,21,95,21,96,21,3,22,4,22,5,22,6,22,7,22,14,22,15,22,16,22,24,22,25,22,26,22,93,22,94,22,96,22,97,22,103,22,104,22,
105,22,106,22,112,22,113,22,114,22,115,22,116,22,117,22,3,23,7,23,13,23,14,23,16,23,17,23,23,23,24,23,26,23,27,23,57,23,58,23,
73,23,74,23,84,23,85,23,86,23,87,23,93,23,94,23,97,23,104,23,105,23,106,23,113,23,114,23,117,23,6,24,7,24,13,24,14,24,17,24,
23,24,24,24,27,24,34,24,35,24,36,24,44,24,45,24,46,24,55,24,56,24,57,24,74,24,75,24,83,24,84,24,86,24,87,24,93,24,95,24,
96,24,97,24,104,24,106,24,113,24,114,24,117,24,6,25,14,25,15,25,16,25,17,25,23,25,24,25,26,25,27,25,28,25,34,25,35,25,36,25,
44,25,45,25,46,25,54,25,55,25,62,25,63,25,64,25,65,25,66,25,67,25,68,25,75,25,76,25,77,25,87,25,93,25,94,25,95,25,97,25,
104,25,106,25,107,25,113,25,114,25,115,25,116,25,117,25,6,26,13,26,14,26,17,26,24,26,25,26,26,26,27,26,28,26,52,26,53,26,54,26,
77,26,78,26,86,26,87,26,93,26,94,26,95,26,97,26,103,26,104,26,106,26,107,26,113,26,114,26,117,26,118,26,5,27,6,27,13,27,17,27,
27,27,54,27,62,27,63,27,64,27,65,27,66,27,67,27,68,27,76,27,77,27,85,27,86,27,93,27,95,27,96,27,97,27,103,27,104,27,105,27,
106,27,107,27,113,27,114,27,117,27,118,27,5,28,6,28,13,28,17,28,26,28,27,28,34,28,35,28,36,28,44,28,45,28,46,28,54,28,55,28,
56,28,74,28,75,28,76,28,93,28,94,28,103,28,107,28,108,28,113,28,114,28,117,28,118,28,5,29,13,29,14,29,15,29,16,29,17,29,23,29,
24,29,25,29,26,29,34,29,35,29,36,29,44,29,45,29,56,29,57,29,58,29,73,29,74,29,84,29,85,29,86,29,93,29,94,29,96,29,97,29,
102,29,103,29,104,29,106,29,107,29,108,29,109,29,112,29,113,29,114,29,115,29,116,29,117,29,43,30,44,30,94,30,95,30,96,30,4,32,5,32,
6,32,7,32,8,32,12,32,13,32,14,32,15,32,16,32,17,32,22,32,23,32,24,32,25,32,26,32,27,32,33,32,34,32,35,32,36,32,37,32,
38,32,44,32,45,32,46,32,47,32,48,32,52,32,53,32,54,32,56,32,57,32,58,32,63,32,64,32,65,32,66,32,67,32,74,32,75,32,76,32,
77,32,78,32,82,32,83,32,84,32,85,32,87,32,88,32,89,32,92,32,93,32,94,32,95,32,96,32,102,32,103,32,107,32,108,32,112,32,113,32,
114,32,116,32,117,32,118,32,3,33,4,33,7,33,8,33,13,33,14,33,17,33,18,33,23,33,24,33,27,33,34,33,38,33,43,33,44,33,46,33,
47,33,48,33,53,33,54,33,57,33,65,33,76,33,77,33,83,33,84,33,87,33,88,33,94,33,102,33,103,33,104,33,106,33,107,33,108,33,113,33,
114,33,117,33,2,34,3,34,13,34,14,34,17,34,18,34,23,34,24,34,25,34,26,34,34,34,36,34,42,34,43,34,53,34,54,34,57,34,65,34,
76,34,77,34,83,34,84,34,86,34,87,34,94,34,102,34,103,34,104,34,106,34,107,34,108,34,113,34,114,34,115,34,117,34,2,35,3,35,13,35,
14,35,18,35,23,35,24,35,25,35,26,35,34,35,35,35,36,35,42,35,43,35,53,35,54,35,55,35,56,35,57,35,65,35,76,35,77,35,83,35,
84,35,85,35,86,35,94,35,102,35,103,35,104,35,105,35,106,35,107,35,108,35,113,35,115,35,117,35,2,36,3,36,13,36,14,36,18,36,23,36,
24,36,25,36,26,36,34,36,36,36,42,36,43,36,45,36,46,36,47,36,48,36,53,36,54,36,57,36,65,36,73,36,76,36,77,36,83,36,84,36,
85,36,86,36,94,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,113,36,115,36,116,36,117,36,2,37,3,37,13,37,14,37,17,37,18,37,
23,37,24,37,34,37,42,37,43,37,47,37,48,37,53,37,54,37,57,37,65,37,73,37,76,37,77,37,83,37,84,37,86,37,87,37,94,37,97,37,
98,37,102,37,103,37,105,37,107,37,108,37,113,37,116,37,117,37,3,38,4,38,7,38,8,38,13,38,14,38,17,38,18,38,23,38,24,38,27,38,
28,38,34,38,43,38,47,38,48,38,53,38,54,38,57,38,65,38,73,38,74,38,76,38,77,38,83,38,84,38,87,38,94,38,97,38,98,38,102,38,
103,38,107,38,108,38,113,38,116,38,117,38,4,39,5,39,6,39,7,39,12,39,13,39,14,39,15,39,16,39,17,39,22,39,23,39,24,39,25,39,
26,39,27,39,28,39,33,39,34,39,35,39,36,39,43,39,44,39,45,39,46,39,47,39,52,39,53,39,54,39,56,39,57,39,58,39,63,39,64,39,
65,39,66,39,67,39,74,39,75,39,76,39,82,39,83,39,84,39,85,39,87,39,88,39,92,39,93,39,94,39,95,39,96,39,97,39,98,39,102,39,
103,39,104,39,106,39,107,39,108,39,109,39,112,39,113,39,114,39,115,39,117,39,4,42,5,42,6,42,7,42,13,42,14,42,15,42,16,42,17,42,
24,42,25,42,26,42,27,42,32,42,33,42,34,42,35,42,36,42,44,42,45,42,46,42,47,42,48,42,52,42,53,42,54,42,55,42,56,42,57,42,
58,42,62,42,63,42,64,42,65,42,66,42,67,42,68,42,71,42,72,42,73,42,74,42,76,42,77,42,78,42,79,42,82,42,83,42,84,42,86,42,
87,42,88,42,89,42,92,42,93,42,94,42,96,42,97,42,98,42,102,42,103,42,104,42,106,42,107,42,108,42,113,42,114,42,115,42,116,42,117,42,
3,43,4,43,6,43,7,43,14,43,17,43,18,43,23,43,24,43,27,43,28,43,33,43,34,43,36,43,37,43,43,43,44,43,47,43,48,43,52,43,
53,43,55,43,57,43,58,43,63,43,67,43,72,43,73,43,77,43,78,43,82,43,83,43,88,43,93,43,96,43,97,43,103,43,104,43,107,43,113,43,
114,43,116,43,117,43,2,44,3,44,7,44,8,44,14,44,17,44,18,44,22,44,23,44,27,44,28,44,33,44,34,44,37,44,43,44,44,44,55,44,
63,44,67,44,73,44,77,44,82,44,83,44,85,44,86,44,87,44,88,44,93,44,94,44,96,44,104,44,106,44,107,44,116,44,2,45,3,45,7,45,
8,45,14,45,17,45,18,45,22,45,23,45,28,45,33,45,34,45,36,45,37,45,44,45,45,45,46,45,47,45,55,45,63,45,67,45,73,45,74,45,
76,45,77,45,83,45,84,45,85,45,86,45,87,45,88,45,94,45,95,45,96,45,104,45,105,45,106,45,115,45,116,45,2,46,3,46,7,46,8,46,
14,46,15,46,16,46,17,46,22,46,23,46,28,46,33,46,34,46,35,46,36,46,47,46,55,46,63,46,67,46,74,46,76,46,77,46,83,46,84,46,
85,46,86,46,87,46,88,46,94,46,95,46,96,46,105,46,114,46,115,46,2,47,3,47,7,47,8,47,14,47,22,47,23,47,27,47,28,47,33,47,
34,47,36,47,37,47,47,47,48,47,55,47,63,47,67,47,74,47,75,47,76,47,83,47,84,47,86,47,87,47,88,47,93,47,94,47,96,47,105,47,
114,47,3,48,4,48,6,48,7,48,14,48,23,48,24,48,27,48,33,48,34,48,37,48,43,48,47,48,55,48,63,48,64,48,67,48,74,48,75,48,
76,48,83,48,84,48,86,48,87,48,93,48,96,48,97,48,105,48,113,48,114,48,117,48,4,49,5,49,6,49,7,49,13,49,14,49,15,49,16,49,
24,49,25,49,26,49,27,49,32,49,33,49,34,49,35,49,37,49,38,49,43,49,44,49,45,49,46,49,47,49,53,49,54,49,55,49,56,49,57,49,
64,49,65,49,66,49,67,49,75,49,83,49,84,49,86,49,87,49,92,49,93,49,94,49,96,49,97,49,98,49,103,49,104,49,105,49,106,49,107,49,
113,49,114,49,115,49,116,49,117,49,24,50,25,50,26,50,27,50,28,50,23,51,24,51,26,51,27,51,28,51,5,52,6,52,7,52,13,52,23,52,
24,52,25,52,54,52,55,52,72,52,73,52,96,52,97,52,115,52,116,52,117,52,118,52,5,53,13,53,14,53,25,53,34,53,35,53,36,53,55,53,
56,53,73,53,97,53,114,53,115,53,5,54,14,54,25,54,34,54,36,54,63,54,64,54,65,54,66,54,73,54,74,54,75,54,76,54,77,54,84,54,
85,54,86,54,87,54,88,54,93,54,94,54,95,54,96,54,97,54,103,54,104,54,105,54,106,54,107,54,113,54,114,54,115,54,116,54,117,54,5,55,
14,55,15,55,25,55,33,55,34,55,36,55,37,55,63,55,66,55,67,55,73,55,74,55,77,55,78,55,83,55,84,55,87,55,88,55,93,55,96,55,
97,55,103,55,107,55,114,55,115,55,5,56,15,56,25,56,63,56,64,56,65,56,66,56,67,56,73,56,77,56,78,56,83,56,92,56,93,56,97,56,
102,56,103,56,104,56,105,56,106,56,107,56,108,56,114,56,115,56,5,57,15,57,16,57,25,57,63,57,66,57,67,57,73,57,77,57,78,57,83,57,
92,57,93,57,97,57,102,57,103,57,114,57,115,57,5,58,15,58,16,58,25,58,63,58,66,58,67,58,73,58,74,58,77,58,78,58,83,58,84,58,
87,58,88,58,93,58,96,58,97,58,103,58,114,58,115,58,5,59,16,59,17,59,25,59,63,59,64,59,65,59,66,59,67,59,68,59,72,59,73,59,
74,59,75,59,76,59,77,59,84,59,85,59,86,59,87,59,93,59,94,59,95,59,96,59,97,59,98,59,103,59,104,59,105,59,106,59,107,59,113,59,
114,59,115,59,116,59,117,59,5,60,16,60,17,60,25,60,5,61,6,61,7,61,23,61,24,61,25,61,12,62,13,62,25,62,35,62,36,62,42,62,
43,62,44,62,45,62,46,62,47,62,48,62,49,62,53,62,54,62,55,62,13,63,44,63,55,63,3,64,4,64,5,64,6,64,7,64,8,64,13,64,
14,64,15,64,16,64,17,64,23,64,24,64,25,64,33,64,34,64,35,64,36,64,44,64,46,64,47,64,48,64,55,64,62,64,63,64,64,64,65,64,
66,64,67,64,68,64,72,64,73,64,74,64,75,64,76,64,77,64,84,64,85,64,86,64,87,64,92,64,93,64,94,64,95,64,96,64,97,64,103,64,
104,64,105,64,106,64,107,64,108,64,113,64,114,64,115,64,116,64,117,64,3,65,6,65,7,65,13,65,14,65,16,65,17,65,25,65,36,65,44,65,
46,65,47,65,55,65,63,65,65,65,66,65,67,65,68,65,73,65,74,65,76,65,77,65,83,65,84,65,87,65,93,65,94,65,97,65,98,65,103,65,
106,65,107,65,114,65,115,65,116,65,117,65,118,65,2,66,3,66,7,66,13,66,17,66,25,66,36,66,44,66,45,66,46,66,55,66,63,66,65,66,
67,66,68,66,73,66,74,66,77,66,82,66,83,66,87,66,88,66,93,66,97,66,98,66,102,66,103,66,107,66,114,66,115,66,2,67,3,67,7,67,
13,67,17,67,25,67,36,67,44,67,45,67,55,67,63,67,65,67,67,67,68,67,73,67,74,67,77,67,82,67,83,67,87,67,88,67,93,67,97,67,
98,67,102,67,103,67,107,67,114,67,115,67,3,68,6,68,7,68,13,68,17,68,25,68,36,68,44,68,45,68,46,68,55,68,63,68,65,68,67,68,
68,68,73,68,74,68,77,68,83,68,87,68,93,68,94,68,97,68,98,68,103,68,106,68,107,68,114,68,115,68,3,69,4,69,5,69,6,69,7,69,
12,69,13,69,14,69,16,69,17,69,18,69,23,69,24,69,25,69,26,69,27,69,28,69,36,69,43,69,44,69,45,69,46,69,47,69,48,69,53,69,
54,69,55,69,56,69,57,69,58,69,62,69,63,69,64,69,65,69,66,69,67,69,68,69,69,69,72,69,73,69,74,69,76,69,77,69,78,69,83,69,
84,69,85,69,86,69,87,69,93,69,94,69,95,69,96,69,97,69,103,69,104,69,105,69,106,69,107,69,113,69,114,69,115,69,116,69,117,69,7,70,
36,70,93,70,107,70,3,71,4,71,5,71,6,71,7,71,33,71,34,71,35,71,36,71,92,71,93,71,94,71,95,71,105,71,106,71,107,71,108,71,
85,72,86,72,95,72,104,72,105,72,14,73,85,73,95,73,105,73,4,74,5,74,6,74,7,74,12,74,13,74,14,74,15,74,16,74,17,74,22,74,
23,74,25,74,26,74,27,74,32,74,33,74,34,74,36,74,37,74,38,74,42,74,43,74,44,74,47,74,48,74,52,74,53,74,54,74,56,74,57,74,
58,74,62,74,63,74,64,74,66,74,67,74,68,74,73,74,74,74,75,74,76,74,77,74,85,74,95,74,105,74,3,75,4,75,6,75,7,75,14,75,
23,75,27,75,33,75,37,75,42,75,43,75,47,75,48,75,53,75,54,75,56,75,57,75,63,75,64,75,67,75,68,75,73,75,74,75,76,75,77,75,
85,75,95,75,105,75,3,76,4,76,5,76,6,76,7,76,14,76,23,76,27,76,33,76,34,76,36,76,37,76,43,76,44,76,45,76,46,76,47,76,
48,76,54,76,55,76,56,76,64,76,67,76,75,76,76,76,85,76,95,76,105,76,113,76,114,76,115,76,117,76,7,77,14,77,23,77,27,77,34,77,
36,77,43,77,44,77,45,77,46,77,47,77,54,77,55,77,56,77,64,77,65,77,66,77,67,77,74,77,75,77,84,77,85,77,95,77,105,77,106,77,
113,77,115,77,116,77,117,77,3,78,7,78,14,78,17,78,18,78,23,78,24,78,26,78,27,78,34,78,35,78,36,78,43,78,44,78,45,78,46,78,
47,78,53,78,54,78,56,78,57,78,64,78,65,78,66,78,73,78,74,78,77,78,85,78,95,78,105,78,3,79,4,79,5,79,6,79,7,79,14,79,
15,79,16,79,17,79,23,79,24,79,25,79,26,79,27,79,28,79,35,79,43,79,44,79,46,79,47,79,52,79,53,79,54,79,56,79,57,79,58,79,
65,79,66,79,73,79,74,79,75,79,76,79,77,79,85,79,95,79,105,79,65,80,85,80,95,80,105,80,63,81,64,81,65,81,66,81,85,81,86,81,
104,81,105,81,
};

unsigned char *gen_font_bitmap() {
	int w = FWIDTH, h = FHEIGHT;
	unsigned char *image = (unsigned char*)malloc(w*h);

	memset(image, 0, w*h);

	int tot = sizeof(font_locs);
	for (int i=0; i<tot; i += 2) {
		int x = font_locs[i], y = font_locs[i+1];

		image[y*w + x] = 255;
	}

	return image;
}

