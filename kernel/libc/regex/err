regex_main.c: In function ‘main’:
regex_main.c:18:15: warning: initialization makes pointer from integer without a cast
   Node *ast = yyparse(&lex);
               ^
regex.c:81:59: error: unknown type name ‘lexer’
 int regex_state_surragate(YYSTYPE *lvalp, YYLTYPE *llocp, lexer *l) {
                                                           ^
regex.c:91:59: error: unknown type name ‘lexer’
 int regex_state_backslash(YYSTYPE *lvalp, YYLTYPE *llocp, lexer *l) {
                                                           ^
regex.c:170:50: error: unknown type name ‘lexer’
 int regex_state0(YYSTYPE *lvalp, YYLTYPE *llocp, lexer *l) {
                                                  ^
regex.c:227:49: error: unknown type name ‘lexer’
 int regex_yylex(YYSTYPE *lvalp, YYLTYPE *llocp, lexer *l) {
                                                 ^
regex.c:326:21: error: unknown type name ‘lexer’
 void _re_init_lexer(lexer *lex, unsigned char *buf, int size) {
                     ^
regex.c: In function ‘main’:
regex.c:339:3: error: unknown type name ‘lexer’
   lexer l = {
   ^
regex.c:340:7: warning: initialization makes integer from pointer without a cast
       re,
       ^
regex.c:340:7: warning: (near initialization for ‘l’)
regex.c:341:7: warning: excess elements in scalar initializer
       0,
       ^
regex.c:341:7: warning: (near initialization for ‘l’)
regex.c:342:7: warning: excess elements in scalar initializer
       strlen(re),
       ^
regex.c:342:7: warning: (near initialization for ‘l’)
regex.c:343:7: warning: excess elements in scalar initializer
       0,
       ^
regex.c:343:7: warning: (near initialization for ‘l’)
regex.c:344:7: warning: excess elements in scalar initializer
       0,
       ^
regex.c:344:7: warning: (near initialization for ‘l’)
regex.c:346:3: warning: excess elements in scalar initializer
   };
   ^
regex.c:346:3: warning: (near initialization for ‘l’)
regex.y: In function ‘yyparse’:
regex.y:38:14: warning: assignment makes integer from pointer without a cast
 cp : ASCII        {$$ = node(NCHARACTER, $1, "");}
              ^
regex.y:39:14: warning: assignment makes integer from pointer without a cast
    | UNICODE_BYTE {$$ = node(NCHARACTER, $1, "");}
              ^
regex.y:41:29: warning: passing argument 2 of ‘node’ makes integer from pointer without a cast
 csetlist   : cp        {$$ = node(NCLASS, "n", $1);}
                             ^
regex.y:21:21: note: expected ‘int’ but argument is of type ‘char *’
 extern struct Node *node(int type, int value, unsigned char *fmt, ...);
                     ^
regex.y:41:34: warning: passing argument 3 of ‘node’ makes pointer from integer without a cast
 csetlist   : cp        {$$ = node(NCLASS, "n", $1);}
                                  ^
regex.y:21:21: note: expected ‘unsigned char *’ but argument is of type ‘int’
 extern struct Node *node(int type, int value, unsigned char *fmt, ...);
                     ^
regex.y:41:14: warning: assignment makes integer from pointer without a cast
 csetlist   : cp        {$$ = node(NCLASS, "n", $1);}
              ^
regex.y:42:41: warning: passing argument 1 of ‘node_append’ makes pointer from integer without a cast
            | cset cp   {$$ = $1; node_append($1, $2);}
                                         ^
regex.y:20:13: note: expected ‘struct Node *’ but argument is of type ‘int’
 extern void node_append(struct Node *node, struct Node *child);
             ^
regex.y:42:54: warning: passing argument 2 of ‘node_append’ makes pointer from integer without a cast
            | cset cp   {$$ = $1; node_append($1, $2);}
                                                      ^
regex.y:20:13: note: expected ‘struct Node *’ but argument is of type ‘int’
 extern void node_append(struct Node *node, struct Node *child);
             ^
regex.y:45:14: warning: assignment makes integer from pointer without a cast
            | '[' '^' csetlist ']' {$$ = node(NNEGATE, 0, "n", $1);}
              ^
regex.y:48:15: warning: assignment makes integer from pointer without a cast
         | '*'      { $$ = node(KREPEAT0, 0, ""); }
               ^
regex.y:49:15: warning: assignment makes integer from pointer without a cast
         | '+'      { $$ = node(KREPEAT1, 0, ""); }
               ^
regex.y:50:22: error: ‘KANY’ undeclared (first use in this function)
         | '.'      { $$ = node(KANY, 0, "");     }
                      ^
regex.y:50:22: note: each undeclared identifier is reported only once for each function it appears in
